{-

TASK 5 - SHARED WALLET.

The aim of two owner wallet is to create smart-contract which send messages then and only then both owners (represented by public keys) authorized it.

TL-B schema of external message body accepted by wallet is as follows:
```
request#_ valid_until:uint32 mode:uint8 msg_to_send:^Cell = Request;
mdg_body#_ public_key:uint256 signature:(512 * Bit) request:^Request = MsgBody;
```

Where `signature` signs `Request` cell with some private key and `public_key` is corresponding public key.

`msg_to_send` is fully formed message which is ready to be accepted by `send_raw_message()`.

Any errors related to the incorrect `msg_to_send` may be ignored (in other words if something goes wrong due to owner's malformed message, it is owner's problem).

When wallet receive request signed by one owner it should store it in storage.

When wallet receives the same request signed by another owner it should process request, that means send `msg_to_send` with `mode` in the same transaction it got second signature.

If message body does not corresponds to `MsgBody` type described above, request is signed not by owner, contains incorrect signature or current time is higher than `valid_until`, request should be ignored (message should not be accepted). Note: absence of `accept_message` and throwing (with exit_code > 1) before `accept_message` are the same for external messages (since will result in ignoring that external message by any validator).

If the same request (regardless approved by one or both owners) is sent the second time it should be ignored.

It is acceptable to ignore requests which are valid for more than 1 minute as well as not accept more than 10 requests per minute.

Before running tests, storage for contract will be generated by `pack_data` with providing two public keys. Thus participants may intoduce their own storage layout.

-}

cell save_wallet_data(int public_key1, int public_key2, cell output_queue) impure inline_ref method_id {
	cell data = begin_cell()
		.store_uint(public_key1, 256)
		.store_uint(public_key2, 256)
		.store_dict(output_queue)
		.end_cell();
	set_data(data);
	return data;
}

;; testable
cell pack_data(int public_key1, int public_key2) impure method_id {
  ;; Fill in
	cell output_queue = new_dict();
	return save_wallet_data(public_key1, public_key2, output_queue);
}


() recv_internal(slice in_msg) impure {
  ;; do nothing for internal messages
}

;; testable
() recv_external(slice in_msg_body) impure {
	;; Fill in

	;; check 10 request per minute limit

	;; check public key
	int public_key = in_msg_body~load_uint(256);
	slice ds = get_data().begin_parse();
	(int pk1, int pk2) = (ds~load_uint(256), ds~load_uint(256));
	int is_pk1? = public_key == pk1; ;; flag request is from pk1 or pk2
	throw_unless(100, is_pk1? | (public_key == pk2));
	;; check signature
	slice signature = in_msg_body~load_bits(512);
	cell request = in_msg_body~load_ref();
	int rh = cell_hash(request); ;; request hash
  ;; throw_unless(101, check_signature(rh, signature, public_key));
	;; check valid msg body format
	in_msg_body.end_parse();
	;; check valid until
	slice rs = request.begin_parse();
	int valid_until = rs~load_uint(32);
	int lifespan = valid_until - now();
	throw_if(102, (lifespan < 1) | (lifespan > 60));
	int mode = rs~load_uint(8);
	cell msg_to_send = rs~load_ref();
	;; check valid request format
	rs.end_parse();

	;; check if request exists
	cell output_queue = ds~load_dict();
	(slice rstored, int f) = output_queue.udict_get?(256, rh);
	if (f) {
		throw_if(103, rstored.slice_bits() == 34); ;; already sent
		int signed_pk1? = rstored~load_int(1);
		throw_if(104, is_pk1? == signed_pk1?);
		;; accept message & send request
		send_raw_message(msg_to_send, mode);
		;; keep sent request to delete when valid_until expires
		output_queue~udict_set_builder(256, rh, begin_cell().store_uint(1, 2).store_slice(rstored.slice_last(32)));
	} else {
		output_queue~udict_set_builder(256, rh, 
			begin_cell()
			.store_int(is_pk1?, 1)
			.store_uint(valid_until, 32)
		);
	}
	accept_message();
	;; delete expired entries

	(rh, rstored, f) = output_queue.udict_get_max?(256);

	while (f) {
		int valid_until = rstored.slice_last(32).preload_uint(32);
		if (valid_until < now()) {
			output_queue~udict_delete?(256, rh);
		}
		(rh, rstored, f) = output_queue.udict_get_prev?(256, rh);
	}

	save_wallet_data(pk1, pk2, output_queue);
}