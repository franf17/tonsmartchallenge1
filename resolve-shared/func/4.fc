{-

TASK 4 - HASHMAP STORAGE.

* Add-new-entry message has the following structure:
    * 32-bit unsigined `op` equal to 1
    * 64-bit unsigned `query_id`
    * 256-bit unsgined key
    * 64-bit `valid_until` unixtime
    * the rest slice is the value

    Upon receipt of such a message, the contract must add a new key/value entry to its data.
    Contract storage format is arbitrary, you are free to change it.

* Remove-outdated message has the following stucture:
    * 32-bit unsigined `op` equal to 2
    * 64-bit unsigned `query_id`

    Upon receipt of such a message, the contract must delete all otudated entries from its data (those with `valid_until` < now()).

* For all other internal messages an error should be thrown

* Get-method `get_key` accepts 256-bit unsignied key and should return `valid_until` integer and value data slice for this key.

  If there is no entry for this key then an error should be thrown.

* Tests will initially run with empty storage

-}
builder store_builder(builder to, builder what) asm(what to) "STB";

(cell) load_data() inline_ref {
    slice ds = get_data().begin_parse();
    if (ds.slice_bits() == 0) {
        return (new_dict());
    } else {
        return (ds~load_dict());
    }
}

() save_data(cell data_dict) impure inline_ref {
    set_data(begin_cell().store_dict(data_dict).end_cell());
}

;; testable
() recv_internal(int balance, int msg_value, cell in_msg_full, slice in_msg_body) {
  int op = in_msg_body~load_uint(32);
  int query_id = in_msg_body~load_uint(64); 

  cell data_dict = load_data();

  if (op == 1) { ;; add new entry

    int key = in_msg_body~load_uint(256); 
    data_dict~udict_set_builder(256, key, 
      begin_cell()
      .store_slice(in_msg_body)
    );
    
    return save_data(data_dict);
  }

  if (op == 2) { ;; remove outdated
    (int key, slice cs, int f) = data_dict.udict_get_max?(256);
    int c = 0;

    while (f) {
      int valid_until = cs~load_uint(64);
      if (valid_until < now()) {
        data_dict~udict_delete?(256, key);
        ;; c += 1;
      }
      (key, cs, f) = data_dict.udict_get_prev?(256, key);
    }
    ;; ~dump(c);
    return save_data(data_dict);
  }

}

;; testable
(int, slice) get_key(int key) method_id {
    cell data_dict = load_data();
    (slice svalue, int f) = data_dict.udict_get?(256, key);
    throw_unless(30, f);
    return (svalue~load_uint(64), svalue);
}
